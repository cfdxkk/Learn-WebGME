/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sat Jun 01 2024 19:59:20 GMT+0800 (中国标准时间).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

// Requirejs dependencies / Requirejs 依赖项
define([
	'plugin/PluginConfig',
	'text!./metadata.json',
	'plugin/PluginBase'
], function (
	PluginConfig,
	pluginMetadata,
	PluginBase) {
	'use strict';

	pluginMetadata = JSON.parse(pluginMetadata);

	/**
	 * Initializes a new instance of ModelicaCodeGenerator.
	 * @class
	 * @augments {PluginBase}
	 * @classdesc This class represents the plugin ModelicaCodeGenerator.
	 * @constructor
	 */
	function ModelicaCodeGenerator() {
		// Call base class' constructor.
		PluginBase.call(this);
		this.pluginMetadata = pluginMetadata;
	}

	/**
	 * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
	 * This is also available at the instance at this.pluginMetadata.
	 * @type {object}
	 */
	ModelicaCodeGenerator.metadata = pluginMetadata;

	// Prototypical inheritance from PluginBase.
	ModelicaCodeGenerator.prototype = Object.create(PluginBase.prototype);
	ModelicaCodeGenerator.prototype.constructor = ModelicaCodeGenerator;

	/**
	 * Main function for the plugin to execute. This will perform the execution.
	 * Notes:
	 * - Always log with the provided logger.[error,warning,info,debug].
	 * - Do NOT put any user interaction logic UI, etc. inside this method.
	 * - callback always has to be called even if error happened.
	 *
	 * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
	 */
	ModelicaCodeGenerator.prototype.main = function (callback) {
		// Use this to access core, project, result, logger etc from PluginBase.
		const self = this;

		// Using the logger.
		self.logger.debug('This is a debug message.');
		self.logger.info('This is an info message.');
		self.logger.warn('This is a warning message.');
		self.logger.error('This is an error message.');

		// Preload the sub-tree from activeNode (all chinldren from the circuits)
		self.loadNodeMap(this.activeNode)
			.then((nodes) => {
				let nodePath, node
				for (nodePath in nodes) {
					self.logger.info(self.core.getAttribute(nodes[nodePath], 'name'), 'has path', nodePath)
				}
				self.result.setSuccess(true);
				callback(null, self.result);
			})
			.catch((err) => {
					// Result success is false at invocation.
					self.logger.error(err.stack);
					callback(err, self.result);
			});
	};

	return ModelicaCodeGenerator;
});
